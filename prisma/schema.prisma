generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id   String @id @default(cuid())
  name String

  Category Category[]
  Product  Product[]
  Table    Table[]
  Order    Order[]
  User     User[]

  DailyOrder DailyOrder[]
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  slug         String
  products     Product[]
  restaurantID String
  restaurant   Restaurant @relation(fields: [restaurantID], references: [id])

  @@index([restaurantID]) // Índice para restaurantID
}

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  price        Float
  image        String
  categoryId   Int
  category     Category        @relation(fields: [categoryId], references: [id])
  orderItems   OrderProducts[]
  restaurantID String
  restaurant   Restaurant      @relation(fields: [restaurantID], references: [id])

  @@index([categoryId])
  @@index([restaurantID]) // Índice para restaurantID
}

model Table {
  id           String       @id @default(cuid())
  name         String
  ubication    String
  qr           String
  orders       Order[]
  restaurantID String
  restaurant   Restaurant   @relation(fields: [restaurantID], references: [id])
  DailyOrder   DailyOrder[]

  @@index([restaurantID]) // Índice para restaurantID
}

enum PaymentMethod {
  efectivo
  transferencia
  tarjeta
}

model DailyOrder {
  id              String        @id @default(cuid())
  date            DateTime      @default(now())
  total           Float
  orders          Order[]
  table           Table         @relation(fields: [tableId], references: [id])
  tableId         String
  restaurantID    String
  restaurant      Restaurant    @relation(fields: [restaurantID], references: [id])
  isClosed        Boolean       @default(false)
  isBillRequested Boolean       @default(false)
  paymentMethod   PaymentMethod? 
  payWith         Float?

  @@index([tableId])
  @@index([restaurantID])
}

model Order {
  id               Int             @id @default(autoincrement())
  name             String
  total            Float
  date             DateTime        @default(now())
  cooked           Boolean         @default(false)
  orderCookedAt    DateTime?
  delivered        Boolean         @default(false)
  orderDeliveredAt DateTime?
  orderProducts    OrderProducts[]
  table            Table           @relation(fields: [tableId], references: [id])
  tableId          String
  restaurantID     String
  restaurant       Restaurant      @relation(fields: [restaurantID], references: [id])
  dailyOrder       DailyOrder      @relation(fields: [dailyOrderId], references: [id])
  dailyOrderId     String

  @@index([tableId])
  @@index([restaurantID])
  @@index([dailyOrderId])
}

model OrderProducts {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@index([orderId])
  @@index([productId])
}

enum UserRole {
  SUPER_ADMIN
  RESTO_ADMIN
  KITCHEN_ORDERS
  READY_ORDERS
  CLIENT_USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(CLIENT_USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  restaurantID          String?
  restaurant            Restaurant?            @relation(fields: [restaurantID], references: [id])

  @@index([restaurantID]) // Índice para restaurantID
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
